"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var DrawerContext_1 = require("./context/DrawerContext");
var kendo_react_common_1 = require("@progress/kendo-react-common");
/**
 * @hidden
 */
exports.DrawerItem = React.forwardRef(function (props, target) {
    var className = props.className, style = props.style, text = props.text, icon = props.icon, separator = props.separator, disabled = props.disabled, selected = props.selected, onSelect = props.onSelect, index = props.index, tabIndex = props.tabIndex, others = __rest(props, ["className", "style", "text", "icon", "separator", "disabled", "selected", "onSelect", "index", "tabIndex"]);
    var _a = React.useContext(DrawerContext_1.DrawerContext), expanded = _a.expanded, mini = _a.mini;
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    React.useImperativeHandle(target, function () { return ({
        element: elementRef,
        focus: focusElement,
        props: props
    }); });
    var itemClassNames = kendo_react_common_1.classNames('k-drawer-item', {
        'k-state-selected': selected,
        'k-state-disabled': disabled
    }, className);
    var onClickHandler = React.useCallback(function () {
        if (onSelect && !disabled) {
            var handle = {
                element: elementRef,
                focus: focusElement,
                props: others
            };
            onSelect(handle, index);
        }
    }, [onSelect, index]);
    return (separator ? React.createElement("li", { className: 'k-drawer-item k-drawer-separator' }) :
        (React.createElement("li", __assign({ ref: elementRef, className: itemClassNames, style: style, "aria-selected": selected, "aria-disabled": disabled, role: "option", onClick: onClickHandler, tabIndex: kendo_react_common_1.getTabIndex(tabIndex, disabled) }, props),
            icon && React.createElement("span", { className: 'k-icon ' + icon }),
            !expanded && mini ? null : React.createElement("span", { className: 'k-item-text' }, text))));
});
exports.DrawerItem.propTypes = {
    className: PropTypes.string,
    style: PropTypes.object,
    text: PropTypes.string,
    icon: PropTypes.string,
    separator: PropTypes.bool,
    selected: PropTypes.bool,
    disabled: PropTypes.bool,
    targetItem: PropTypes.any
};
exports.DrawerItem.displayName = 'KendoDrawerItem';
//# sourceMappingURL=DrawerItem.js.map